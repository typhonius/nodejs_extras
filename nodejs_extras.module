<?php

/**
 * Implements hook_user_login
 */
function nodejs_extras_user_login(&$edit, $account) {
  nodejs_extras_whos_online_replace($account, 'login');
}

/**
 * Implements hook_user_logout
 */
function nodejs_extras_user_logout($account) {
  nodejs_extras_whos_online_replace($account, 'logout');
}

/**
 * Implements hook_cron()
 */
function nodejs_extras_cron() {
  nodejs_extras_whos_online_replace();

  // Delete site comments
  $comments_deleted_last = variable_get('nodejs_extras_comments_deleted_last', '');
  if (!isset($comments_deleted_last) || (REQUEST_TIME - $comments_deleted_last > 600)) {
    // remove them all every 5 minutes 
    nodejs_extras_delete_comments();
    variable_set('nodejs_extras_comments_deleted_last', REQUEST_TIME);
  }
  //nodejs_broadcast_message('Cron started', 'Hold on to your butts!');
  $notify = (object) array(
    'data' => (object) array(
      'subject' => 'Cron started',
      'body' => 'Hold on to your butts!',
    ),
    'channel' => 'chat_nodejs_auth',
    'callback' => 'nodejsNotify',
  );
  nodejs_enqueue_message($notify);
}

function nodejs_extras_delete_comments() {
  $query = 'SELECT cid FROM {comment}';

  $result = db_query($query);
  $cids = array();
  foreach ($result as $record) {
    $cids[] = $record->cid;
  }
  comment_delete_multiple($cids);
}


function nodejs_extras_whos_online_replace($account = NULL, $op = NULL) {
  $interval = REQUEST_TIME - variable_get('user_block_seconds_online', 900);

  // Perform database queries to gather online user lists. We use s.timestamp
  // rather than u.access because it is much faster.
  $authenticated_count = db_query("SELECT COUNT(DISTINCT s.uid) FROM {sessions} s WHERE s.timestamp >= :timestamp AND s.uid > 0", array(':timestamp' => $interval))->fetchField();
    if ($op == 'login') {
      $authenticated_count += 1;
    }
    if ($op == 'logout') {
      $authenticated_count -= 1;
    }
  
  $output = '<div class="content">';   
  $output .= '<p>' . format_plural($authenticated_count, 'There is currently 1 user online.', 'There are currently @count users online.') . '</p>';

  // Display a list of currently online users.
  $max_users = variable_get('user_block_max_list_count', 10);
  if ($authenticated_count && $max_users) {
    $items = db_query_range('SELECT u.uid, u.name, MAX(s.timestamp) AS max_timestamp FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.timestamp >= :interval AND s.uid > 0 GROUP BY u.uid, u.name ORDER BY max_timestamp DESC', 0, $max_users, array(':interval' => $interval))->fetchAll();
    if ($op == 'login') {
      $items[] = $account;
    }
    if ($op == 'logout') {
      foreach ($items as $key => $user) {
        if ($user->uid == $account->uid) {
          unset($items[$key]);
        }
      }
    }
    $output .= theme('user_list', array('users' => $items));
    $output .= '</div>';
  }

  $commands[] = ajax_command_replace('#block-user-online .content', $output);
  $message = (object) array(
    'broadcast' => TRUE,
    'channel' => 'nodejs_extras',
    'commands' => $commands,
    'callback' => 'nodejsExtras',
  );
  nodejs_enqueue_message($message);
}


/**
* Implements hook_nodejs_handlers_info().
*/
function nodejs_extras_nodejs_handlers_info() {
  return array(
    drupal_get_path('module', 'nodejs_extras') . '/nodejs.extras.js',
  );
}

/**
 * Implementation of hook_page_alter()
 */
function nodejs_extras_page_alter() {
  if (variable_get('nodejs_extras_got_mail', FALSE)) {
    drupal_set_message(t('Breaking News!'), 'warning', FALSE);
//    variable_set('nodejs_extras_got_mail', FALSE);
  }
}

/**
 * Implementation of hook_menu()
 */
function nodejs_extras_menu() {
  $items = array();
  $items['admin/config/media/chat_general/nodejs_extras'] = array(
    'title' => 'Nodejs Extras',
    'description' => 'A page where Nodejs Extras settings may be altered.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodejs_extras_admin_form'),
    'access arguments' => array('administer chat_general'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function nodejs_extras_admin_form($form, &$form_state) {
  $form['nodejs_extras_1'] = array(
    '#type' => 'fieldset',
    '#title' => 'PHP Style',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form['nodejs_extras_1']['nodejs_extras_got_mail'] = array(
    '#type' => 'checkbox',
    '#title' => 'Breaking News',
    '#default_value' => variable_get('nodejs_extras_got_mail', 'FALSE'),
  );
  $form['nodejs_extras_2'] = array(
    '#type' => 'fieldset',
    '#title' => 'Nodejs Style',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form['nodejs_extras_2']['nodejs_extras_got_mail_nodejs'] = array(
    '#type' => 'submit',
    '#value' => 'Breaking News',
    '#submit' => array('nodejs_extras_submit'),
  );
  return system_settings_form($form);
}

function nodejs_extras_submit(&$form, &$form_state) {
  $output = "<div class=\"messages warning\">\n";
  $output .= 'Breaking News';
  $output .= "</div>\n";

  $commands[] = ajax_command_before('#main-wrapper', $output);
  $message = (object) array(
 //   'channel' => 'chat_nodejs_auth',
    'commands' => $commands,
    'callback' => 'nodejsExtras',
    'broadcast' => TRUE,
  );
  nodejs_enqueue_message($message);

  $notify = (object) array(
    'data' => (object) array(
      'subject' => 'Breaking News!',
      'body' => 'A news story',
    ),
    'broadcast' => TRUE,
//    'channel' => 'chat_nodejs_auth',
    'callback' => 'nodejsNotify',
  );
  nodejs_enqueue_message($notify);
}

/**
 * Implements hook_block_info
 */
function nodejs_extras_block_info() {
  $blocks['nodejs_extras_number_comments'] = array(
    'info' => t('Number of comments (Live)'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view
 */
function nodejs_extras_block_view($delta = '') {
  $nid = NULL;
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
  }
  $block = array();
  switch ($delta) {
    case 'nodejs_extras_number_comments':
      $block['subject'] = t('Number of comments (Live)');
      $block['content'] = array(
        '#theme' => 'item_list',
        '#type' => 'ul',
        '#items' => nodejs_extras_comment_number($nid),
      );
    break;
  }
  return $block;
}

/**
 * Helper function to get number of comments for node/total
 */
function nodejs_extras_comment_number($nid = NULL) {
  $query = db_select('comment', 'c')
    ->fields('c', array('cid'))
    ->orderBy('cid', 'DESC');
  $total = $query->execute()->fetchField();
  if (isset($nid)) {
    $query->condition('nid', $nid, '=');
  }
  $num_rows = $query->countQuery()->execute()->fetchField();

  $content = array(
    t('@count posted', array('@count' => format_plural($num_rows, '1 comment', '@count comments'))),
  );
//  if ($total) {
    $content[] = t('@total ever posted', array('@total' => format_plural($total, '1 comment', '@count comments')));
//  }
  
  return $content;
}

/**
 * Implements hook_comment_presave
 */
function nodejs_extras_comment_presave($comment) {
  nodejs_extras_alter_comment_block($comment);
}

/**
 * Implements hook_comment_delete
 */
function nodejs_extras_comment_delete($comment) {
  nodejs_extras_alter_comment_block($comment);
}

/**
 * Implements hook_comment_insert
 */
function nodejs_extras_comment_insert($comment) {
  nodejs_extras_alter_comment_block($comment);
}


function nodejs_extras_alter_comment_block($comment) {
  $output = '<div class="content">';
  $output .= theme('item_list', array('items' => nodejs_extras_comment_number(), 'type' => 'ul'));
  $output .= '</div>';

  $commands[] = ajax_command_replace('#block-nodejs-extras-nodejs-extras-number-comments .content', $output);
  $message = (object) array(
    'broadcast' => TRUE,
    'channel' => 'nodejs_extras',
    'commands' => $commands,
    'callback' => 'nodejsExtras',
  );
  nodejs_enqueue_message($message);  
}
